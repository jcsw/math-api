buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
        avastDockerComposeVersion = '0.7.1'
        transmodeDockerVersion = '1.2'
        asciidoctorVersion = '1.5.3'
    }

    repositories {
        jcenter()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.avast.gradle:gradle-docker-compose-plugin:$avastDockerComposeVersion"
        classpath "se.transmode.gradle:gradle-docker:$transmodeDockerVersion"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:$asciidoctorVersion"
    }
}

plugins {
    id "com.github.spotbugs" version "1.6.2"
    id "org.asciidoctor.convert" version "1.5.3"
}

group = 'br.com.jcsw'
version = '0.0.1-SNAPSHOT'

repositories {
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.spotbugs'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'docker'
apply plugin: 'docker-compose'

sourceCompatibility = 10
targetCompatibility = 10

repositories {
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

ext {
    springBootVersion = '2.0.3.RELEASE'
    springCloudVersion = 'Finchley.RC2'
}

dependencies {
    compile project(':spring-aop-log')
    compile project(':spring-chaos-monkey')

    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-undertow'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
    compile 'org.springframework.boot:spring-boot-starter-amqp'
    compile 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    compile 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'
    compile 'org.springframework.cloud:spring-cloud-starter-netflix-ribbon'
    compile 'org.springframework.cloud:spring-cloud-starter-openfeign'
    compile 'com.github.spotbugs:spotbugs:3.1.3'
    compile 'javax.xml.bind:jaxb-api:2.3.0'

    runtime 'org.springframework.boot:spring-boot-devtools'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testCompile 'io.cucumber:cucumber-java8:3.0.2'
    testCompile 'io.cucumber:cucumber-junit:3.0.2'

    testCompile 'io.rest-assured:rest-assured:3.1.0'
    testCompile 'io.rest-assured:json-schema-validator:3.1.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
    }
}

mainClassName = 'br.com.jcsw.math.MathApiApplication'

jacoco {
    toolVersion = "0.8.1"
}

configurations {
    compile.exclude module: 'spring-boot-starter-tomcat'
    compile.exclude group: 'org.apache.tomcat'

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime

    contractTestCompile.extendsFrom testCompile
    contractTestRuntime.extendsFrom testRuntime

    acceptanceTestCompile.extendsFrom testCompile
    acceptanceTestRuntime.extendsFrom testRuntime
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }

    contractTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }

    acceptanceTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/acceptanceTest/java')
        }
        resources.srcDir file('src/acceptanceTest/resources')
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    testLogging {
        events "passed", "skipped", "failed"
    }
}

task contractTest(type: Test) {
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath

    testLogging {
        events "passed", "skipped", "failed"
    }
}

task acceptanceTest(type: Test) {
    testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
    classpath = sourceSets.acceptanceTest.runtimeClasspath

    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }

    executionData(test, integrationTest, contractTest)
}

task spotbugs(
        group: "Verification",
        description: "Marker task to enabled spotbugs."
)

spotbugs {
    toolVersion = '3.1.3'
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    tasks.spotbugsMain.onlyIf {
        taskGraph.hasTask((tasks.spotbugs))
    }
    tasks.spotbugsTest.onlyIf {
        taskGraph.hasTask((tasks.spotbugs))
    }
    tasks.spotbugsIntegrationTest.onlyIf {
        taskGraph.hasTask((tasks.spotbugs))
    }
    tasks.spotbugsContractTest.onlyIf {
        taskGraph.hasTask((tasks.spotbugs))
    }
}

ext {
    snippetsDir = file('build/snippets')
}

integrationTest {
    outputs.dir snippetsDir
}

asciidoctor {
    attributes 'snippets': snippetsDir
    sourceDir 'src/main/asciidoc'
    outputDir "build/asciidoc"
    inputs.dir snippetsDir
    dependsOn integrationTest
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

task copyRestDocs(type: Copy) {
    dependsOn asciidoctor
    from "${asciidoctor.outputDir}/html5"
    into "${project.buildDir}/resources/main/static/docs"
}

bootRun {
    dependsOn copyRestDocs
}

dockerCompose {
    bootNested {
        useComposeFiles = ["$project.rootDir/docker/dependencies/mongodb/docker-compose.yml",
                           "$project.rootDir/docker/dependencies/rabbitmq/docker-compose.yml"]
        stopContainers = true
        isRequiredBy(project.tasks.bootRun)
    }

    contractTestNested {
        useComposeFiles = ["$project.projectDir/src/contractTest/resources/mongodb/docker-compose.yml",
                           "$project.projectDir/src/contractTest/resources/rabbitmq/docker-compose.yml"]
        stopContainers = true
        isRequiredBy(project.tasks.contractTest)
    }
}

distDocker {
    baseImage "openjdk:10-jdk-slim"
    maintainer 'Jonas Cezar "jcezar.al@gmail.com"'
    tag = "jcezar/math-api"
    exposePort 9900
}