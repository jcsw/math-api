buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
        avastDockerComposeVersion = '0.7.1'
        transmodeDockerVersion = '1.2'
    }

    repositories {
        jcenter()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.avast.gradle:gradle-docker-compose-plugin:$avastDockerComposeVersion"
        classpath "se.transmode.gradle:gradle-docker:$transmodeDockerVersion"
    }
}

plugins {
    id "com.github.spotbugs" version "1.6.2"
}

repositories {
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

group = 'br.com.jcsw'
version = '0.0.1-SNAPSHOT'

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 10
    targetCompatibility = 10

    repositories {
        jcenter()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }

    ext {
        springBootVersion = '2.0.3.RELEASE'
        springCloudVersion = 'Finchley.RC2'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
        }
    }

    dependencies {
        compile 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'
        compile 'org.springframework.cloud:spring-cloud-starter-netflix-ribbon'
        compile 'org.springframework.cloud:spring-cloud-starter-openfeign'
        compile 'com.github.spotbugs:spotbugs:3.1.3'
        compile 'javax.xml.bind:jaxb-api:2.3.0'

        testCompile 'org.springframework.boot:spring-boot-starter-test'
        testCompile 'io.cucumber:cucumber-java8:3.0.2'
        testCompile 'io.cucumber:cucumber-junit:3.0.2'
    }

    configurations {
        compile.exclude module: 'spring-boot-starter-tomcat'
        compile.exclude group: 'org.apache.tomcat'

        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime

        contractTestCompile.extendsFrom testCompile
        contractTestRuntime.extendsFrom testRuntime
    }

    sourceSets {
        contractTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/contractTest/java')
            }
            resources.srcDir file('src/contractTest/resources')
        }
    }

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integrationTest/java')
            }
            resources.srcDir file('src/integrationTest/resources')
        }
    }

    task integrationTest(type: Test) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    task contractTest(type: Test) {
        testClassesDirs = sourceSets.contractTest.output.classesDirs
        classpath = sourceSets.contractTest.runtimeClasspath

        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    jacoco {
        toolVersion = "0.8.1"
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination file("${buildDir}/jacocoHtml")
        }
    }

    task spotbugs(
            group: "Verification",
            description: "Marker task to enabled spotbugs."
    )

    spotbugs {
        toolVersion = '3.1.3'
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    gradle.taskGraph.whenReady { taskGraph ->
        tasks.spotbugsMain.onlyIf {
            taskGraph.hasTask((tasks.spotbugs))
        }
        tasks.spotbugsTest.onlyIf {
            taskGraph.hasTask((tasks.spotbugs))
        }
        tasks.spotbugsIntegrationTest.onlyIf {
            taskGraph.hasTask((tasks.spotbugs))
        }
        tasks.spotbugsContractTest.onlyIf {
            taskGraph.hasTask((tasks.spotbugs))
        }
    }
}

project('application-ws') {
    apply plugin: 'application'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'docker'
    apply plugin: 'docker-compose'

    mainClassName = 'br.com.jcsw.math.MathApiApplication'

    dockerCompose {
        useComposeFiles = ["$project.rootDir/docker/dependencies/mongodb/docker-compose.yml", "$project.rootDir/docker/dependencies/rabbitmq/docker-compose.yml"]
        stopContainers = false
    }

    dockerCompose.isRequiredBy(bootRun)

    distDocker {
        baseImage "openjdk:10-jdk-slim"
        maintainer 'Jonas Cezar "jcezar.al@gmail.com"'
        tag = "jcezar/math-api"
        exposePort 9900
    }

    dependencies {
        compile project(':spring-aop-log')
        compile project(':domain-api')
        compile project(':infra-api')

        compile 'org.springframework.boot:spring-boot-starter-web'
        compile 'org.springframework.boot:spring-boot-starter-undertow'
        compile 'org.springframework.boot:spring-boot-starter-actuator'
        compile 'io.springfox:springfox-swagger2:2.8.0'
        compile 'io.springfox:springfox-swagger-ui:2.8.0'

        runtime project(':domain-impl')
        runtime project(':infra-impl')

        runtime 'org.springframework.boot:spring-boot-devtools'

        testCompile 'io.cucumber:cucumber-spring:3.0.2'
        testCompile 'io.rest-assured:rest-assured:3.0.1'
        testCompile 'io.rest-assured:json-schema-validator:3.0.1'
        testCompile 'org.springframework.restdocs:spring-restdocs-mockmvc'
    }
}

project('domain-api') {
    dependencies {
        compile 'org.apache.commons:commons-lang3'
        compile 'io.springfox:springfox-swagger2:2.8.0'
    }
}

project('domain-impl') {
    dependencies {
        compile project(':spring-aop-log')
        compile project(':domain-api')
        compile project(':infra-api')
    }
}

project('infra-api') {
    dependencies {
        compile project(':domain-api')
    }
}

project('infra-impl') {

    dependencies {
        compile project(':spring-aop-log')
        compile project(':infra-api')
        compile project(':infra-mongodb')
        compile project(':infra-rabbitmq')
        compile project(':infra-feature-toggle')
    }
}

project('infra-feature-toggle') {

    dependencies {
        compile project(':spring-aop-log')

        testCompile 'com.github.tomakehurst:wiremock:2.18.0'
    }
}

project('infra-mongodb') {

    apply plugin: 'docker-compose'

    dockerCompose {
        useComposeFiles = ["$project.projectDir/src/contractTest/resources/docker-compose.yml"]
        stopContainers = true
        removeContainers = true
    }

    dockerCompose.isRequiredBy(contractTest)

    dependencies {
        compile project(':spring-aop-log')

        compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
    }
}

project('infra-rabbitmq') {

    apply plugin: 'docker-compose'

    dockerCompose {
        useComposeFiles = ["$project.projectDir/src/contractTest/resources/docker-compose.yml"]
        stopContainers = true
        removeContainers = true
    }

    dockerCompose.isRequiredBy(contractTest)

    dependencies {
        compile project(':spring-aop-log')

        compile 'org.springframework.boot:spring-boot-starter-amqp'
    }
}